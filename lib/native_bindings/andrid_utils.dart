// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.anandnet.harmonymusic.Equalizer`
class Equalizer extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Equalizer> $type;

  @jni$_.internal
  Equalizer.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/anandnet/harmonymusic/Equalizer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Equalizer$NullableType();
  static const type = $Equalizer$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Equalizer() {
    return Equalizer.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_openEqualizer = _class.instanceMethodId(
    r'openEqualizer',
    r'(ILandroid/content/Context;Landroid/app/Activity;)Z',
  );

  static final _openEqualizer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean openEqualizer(int i, android.content.Context context, android.app.Activity activity)`
  bool openEqualizer(
    int i,
    jni$_.JObject context,
    jni$_.JObject activity,
  ) {
    final _$context = context.reference;
    final _$activity = activity.reference;
    return _openEqualizer(
            reference.pointer,
            _id_openEqualizer as jni$_.JMethodIDPtr,
            i,
            _$context.pointer,
            _$activity.pointer)
        .boolean;
  }

  static final _id_initAudioEffect = _class.instanceMethodId(
    r'initAudioEffect',
    r'(ILandroid/content/Context;)V',
  );

  static final _initAudioEffect = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void initAudioEffect(int i, android.content.Context context)`
  void initAudioEffect(
    int i,
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    _initAudioEffect(reference.pointer,
            _id_initAudioEffect as jni$_.JMethodIDPtr, i, _$context.pointer)
        .check();
  }

  static final _id_endAudioEffect = _class.instanceMethodId(
    r'endAudioEffect',
    r'(ILandroid/content/Context;)V',
  );

  static final _endAudioEffect = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void endAudioEffect(int i, android.content.Context context)`
  void endAudioEffect(
    int i,
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    _endAudioEffect(reference.pointer, _id_endAudioEffect as jni$_.JMethodIDPtr,
            i, _$context.pointer)
        .check();
  }
}

final class $Equalizer$NullableType extends jni$_.JObjType<Equalizer?> {
  @jni$_.internal
  const $Equalizer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/harmonymusic/Equalizer;';

  @jni$_.internal
  @core$_.override
  Equalizer? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Equalizer.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Equalizer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Equalizer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Equalizer$NullableType) &&
        other is $Equalizer$NullableType;
  }
}

final class $Equalizer$Type extends jni$_.JObjType<Equalizer> {
  @jni$_.internal
  const $Equalizer$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/harmonymusic/Equalizer;';

  @jni$_.internal
  @core$_.override
  Equalizer fromReference(jni$_.JReference reference) =>
      Equalizer.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Equalizer?> get nullableType =>
      const $Equalizer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Equalizer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Equalizer$Type) && other is $Equalizer$Type;
  }
}

/// from: `com.anandnet.harmonymusic.SDKInt$Companion`
class SDKInt$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<SDKInt$Companion> $type;

  @jni$_.internal
  SDKInt$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/anandnet/harmonymusic/SDKInt$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $SDKInt$Companion$NullableType();
  static const type = $SDKInt$Companion$Type();
  static final _id_getSDKInt = _class.instanceMethodId(
    r'getSDKInt',
    r'()I',
  );

  static final _getSDKInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getSDKInt()`
  int getSDKInt() {
    return _getSDKInt(reference.pointer, _id_getSDKInt as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SDKInt$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return SDKInt$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $SDKInt$Companion$NullableType
    extends jni$_.JObjType<SDKInt$Companion?> {
  @jni$_.internal
  const $SDKInt$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/harmonymusic/SDKInt$Companion;';

  @jni$_.internal
  @core$_.override
  SDKInt$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : SDKInt$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SDKInt$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SDKInt$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SDKInt$Companion$NullableType) &&
        other is $SDKInt$Companion$NullableType;
  }
}

final class $SDKInt$Companion$Type extends jni$_.JObjType<SDKInt$Companion> {
  @jni$_.internal
  const $SDKInt$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/harmonymusic/SDKInt$Companion;';

  @jni$_.internal
  @core$_.override
  SDKInt$Companion fromReference(jni$_.JReference reference) =>
      SDKInt$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SDKInt$Companion?> get nullableType =>
      const $SDKInt$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SDKInt$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SDKInt$Companion$Type) &&
        other is $SDKInt$Companion$Type;
  }
}

/// from: `com.anandnet.harmonymusic.SDKInt`
class SDKInt extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<SDKInt> $type;

  @jni$_.internal
  SDKInt.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/anandnet/harmonymusic/SDKInt');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $SDKInt$NullableType();
  static const type = $SDKInt$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lcom/anandnet/harmonymusic/SDKInt$Companion;',
  );

  /// from: `static public final com.anandnet.harmonymusic.SDKInt$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static SDKInt$Companion get Companion =>
      _id_Companion.get(_class, const $SDKInt$Companion$Type());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory SDKInt() {
    return SDKInt.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }
}

final class $SDKInt$NullableType extends jni$_.JObjType<SDKInt?> {
  @jni$_.internal
  const $SDKInt$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/harmonymusic/SDKInt;';

  @jni$_.internal
  @core$_.override
  SDKInt? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : SDKInt.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SDKInt?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SDKInt$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SDKInt$NullableType) &&
        other is $SDKInt$NullableType;
  }
}

final class $SDKInt$Type extends jni$_.JObjType<SDKInt> {
  @jni$_.internal
  const $SDKInt$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/harmonymusic/SDKInt;';

  @jni$_.internal
  @core$_.override
  SDKInt fromReference(jni$_.JReference reference) => SDKInt.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SDKInt?> get nullableType => const $SDKInt$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SDKInt$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SDKInt$Type) && other is $SDKInt$Type;
  }
}
